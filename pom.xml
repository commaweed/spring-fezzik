<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<groupId>fezzik</groupId>
	<artifactId>fezzik</artifactId>
	<version>1.0.0-BUILD-SNAPSHOT</version>
	<packaging>war</packaging>
	<name>Our Web App [${project.packaging} : ${project.version}]</name>

	<!-- ========== -->
	<!-- PROPERTIES -->
	<!-- ========== -->

	<properties>
		<java.version>1.8</java.version>
		<spring.version>4.2.4.RELEASE</spring.version>
		<spring.security.version>4.1.1.RELEASE</spring.security.version>
		<org.slf4j-version>1.7.18</org.slf4j-version>
		<log4j-version>2.5</log4j-version>
		<jackson-json>2.6.5</jackson-json>

		<!-- testing properties -->
		<spock.version>0.7-groovy-2.0</spock.version>
		<jsonpath.version>0.8.0</jsonpath.version>
		<powermock.version>1.6.4</powermock.version>
		
		<!-- maven timestamp -->
		<timestamp>${maven.build.timestamp}</timestamp>
		<maven.build.timestamp.format>yyyy-MM-dd HH:mm:ss</maven.build.timestamp.format>
		
		<!-- property file creation properties (each environment will get its own set of properties) -->
		<property.filters.dir>${project.basedir}/properties/filters</property.filters.dir>
		<property.source.dir>${project.basedir}/properties/source</property.source.dir>
		<property.target.dir>${project.build.directory}/properties</property.target.dir>
		
	</properties>

	<!-- ============ -->
	<!-- DEPENDENCIES -->
	<!-- ============ -->

	<dependencies>
		<!-- commons -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.4</version>
		</dependency>

		<!-- Spring -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${spring.version}</version>
			<exclusions>
				<!-- Exclude Commons Logging in favor of SLF4j; include jcl-over-slf4j -->
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${spring.version}</version>
		</dependency>
		
		<!-- Spring Security -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-core</artifactId>
			<version>${spring.security.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-web</artifactId>
			<version>${spring.security.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-config</artifactId>
			<version>${spring.security.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-taglibs</artifactId>
			<version>${spring.security.version}</version>
			<scope>runtime</scope>
		</dependency>
		
		<!-- spring mongo templates -->
		<dependency>
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-mongodb</artifactId>
			<version>1.9.2.RELEASE</version>
		</dependency>		
		
		<!-- provides annotations for Automatic Resource Management, automatic generation of getters, setters, equals, 
			hashCode and toString, and more! 
			
			UHG! this requires JVM arguments - discuss with Matt because it would make for development with less boiler plate
			-vmargs -javaagent:lombok.jar -Xbootclasspath/a:lombok.jar
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>1.16.10</version>
			<scope>runtime</scope>
		</dependency>		
		-->
				
		<!-- Logging -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${org.slf4j-version}</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>${org.slf4j-version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-slf4j-impl</artifactId>
			<version>${log4j-version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-api</artifactId>
			<version>${log4j-version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<version>${log4j-version}</version>
			<scope>runtime</scope>
		</dependency>

		<!-- @Inject -->
		<dependency>
			<groupId>javax.inject</groupId>
			<artifactId>javax.inject</artifactId>
			<version>1</version>
		</dependency>

		<!-- Web APIs -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.1.0</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet.jsp</groupId>
			<artifactId>javax.servlet.jsp-api</artifactId>
			<version>2.3.1</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>
		<dependency>
			<groupId>org.apache.tiles</groupId>
			<artifactId>tiles-jsp</artifactId>
			<version>3.0.5</version>
		</dependency>		

		<!-- json (also used by json log4j configuration) -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-core</artifactId>
			<version>${jackson-json}</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>${jackson-json}</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-annotations</artifactId>
			<version>${jackson-json}</version>
		</dependency>

		<!-- ====================== -->
		<!-- Unit Test dependencies -->
		<!-- ====================== -->

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency>


		<!-- provides ReflectionTestUtil - test private / static fields or methods -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${spring.version}</version>
			<scope>test</scope>
		</dependency>

		<!-- spock unit testing framework -->
		<dependency>
			<groupId>org.spockframework</groupId>
			<artifactId>spock-core</artifactId>
			<version>${spock.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.spockframework</groupId>
			<artifactId>spock-spring</artifactId>
			<version>${spock.version}</version>
			<scope>test</scope>
		</dependency>

		<!-- groovy needed for spock framework unit testing -->
		<dependency>
			<groupId>org.codehaus.groovy</groupId>
			<artifactId>groovy-all</artifactId>
			<version>2.4.6</version>
			<scope>test</scope>
		</dependency>

		<!-- can be used to assert when unit testing JSON data - JsonAssert -->
		<dependency>
			<groupId>com.jayway.jsonpath</groupId>
			<artifactId>json-path</artifactId>
			<version>${jsonpath.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.jayway.jsonpath</groupId>
			<artifactId>json-path-assert</artifactId>
			<version>${jsonpath.version}</version>
			<scope>test</scope>
		</dependency>

		<!-- used to instantiate new objects in a non-standard way (required for mocking with spock ) enables mocking of classes 
			without default constructor -->
		<dependency>
			<groupId>org.objenesis</groupId>
			<artifactId>objenesis</artifactId>
			<version>2.1</version>
			<scope>test</scope>
		</dependency>

		<!-- used to instantiate new objects in a non-standard way (required for mocking classes that have no existing interface) -->
		<dependency>
			<groupId>cglib</groupId>
			<artifactId>cglib-nodep</artifactId>
			<version>3.2.1</version>
			<scope>test</scope>
		</dependency>

		<!-- powermock includes it's own version of mockito; they will collide if this is included -->
<!--
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-all</artifactId>
			<version>1.9.0</version>
			<scope>test</scope>
		</dependency>
-->

		<!-- use powermock as an extension to mockito or spock (mock final, static or private methods, remove static initializers, 
			etc.) -->
		<dependency>
			<groupId>org.powermock</groupId>
			<artifactId>powermock-module-junit4</artifactId>
			<version>${powermock.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.powermock</groupId>
			<artifactId>powermock-api-mockito</artifactId>
			<version>${powermock.version}</version>
			<scope>test</scope>
		</dependency>
		
		<!-- can be used to extend unit testing for junit, mockito, or spock - more powerful asserts (matchers) -->
		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest-all</artifactId>
			<version>1.3</version>
			<scope>test</scope>
		</dependency>


	</dependencies>

	<!-- ============ -->
	<!-- BUILD -->
	<!-- ============ -->

	<build>

		<finalName>${project.artifactId}</finalName>

		<plugins>

			<!-- standard boiler-plate plugin for compiler level -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.5.1</version>
				<configuration>
					<encoding>UTF-8</encoding>
					<source>${java.version}</source>
					<target>${java.version}</target>
					<compilerArgument>-Xlint:all</compilerArgument>
					<showWarnings>true</showWarnings>
					<showDeprecation>true</showDeprecation>
				</configuration>
			</plugin>


			<!-- spring project nature -->
			<plugin>
				<artifactId>maven-eclipse-plugin</artifactId>
				<version>2.9</version>
				<configuration>
					<additionalProjectnatures>
						<projectnature>org.springframework.ide.eclipse.core.springnature</projectnature>
					</additionalProjectnatures>
					<additionalBuildcommands>
						<buildcommand>org.springframework.ide.eclipse.core.springbuilder</buildcommand>
					</additionalBuildcommands>
					<downloadSources>true</downloadSources>
					<downloadJavadocs>true</downloadJavadocs>
				</configuration>
			</plugin>

			<!-- groovy maven compile support (for spock unit testing) -->
			<!-- <plugin>
				<groupId>org.codehaus.gmavenplus</groupId>
				<artifactId>gmavenplus-plugin</artifactId>
				<version>1.4</version>
				<executions>
					<execution>
						<goals>
							<goal>compile</goal>
							<goal>testCompile</goal>
						</goals>
					</execution>
				</executions>
			</plugin>	 -->		

			<!-- unit test - surefire plugin - define unit test code types -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.19.1</version>
				<configuration>
					<includes>
						<include>**/*Test.class</include> <!-- java unit tests -->
						<include>**/*Spec.class</include> <!-- groovy unit tests -->
					</includes>

					<!-- I like to do DAO and Service layer integration tests -->
					<excludes>
						<exclude>**/integration/**/*.java</exclude>
						<exclude>**/integration/**/*.groovy</exclude>
					</excludes>
				</configuration>
			</plugin>

			<!-- cobertura test coverage -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>cobertura-maven-plugin</artifactId>
				<version>2.7</version>
				<dependencies>
					<dependency>
						<groupId>org.ow2.asm</groupId>
						<artifactId>asm</artifactId>
						<version>5.1</version>
					</dependency>
				</dependencies>
				<configuration>
					<check>
						<lineRate>80</lineRate>
						<branchRate>80</branchRate>
						<haltOnFailure>false</haltOnFailure>
						<totalLineRate>80</totalLineRate>
						<totalBranchRate>80</totalBranchRate>
					</check>
					<instrumentation>
						<includes>
							<include>**/*.class</include>
						</includes>
						<excludes>
							<exclude>**/integration/**/*.class</exclude>
						</excludes>
					</instrumentation>
				</configuration>
			</plugin>

			<!-- property file management for all of the applications environments -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.5</version>
				<executions>
					<execution>
						<id>development-property-file</id>
						<phase>package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<filters>
								<!-- production is the main environment, so it goes first -->
								<filter>${property.filters.dir}/production.filters</filter> 
								
								<!-- override the above property files with these -->
								<filter>${property.filters.dir}/development.filters</filter> 
							</filters>
							<resources>
								<resource>
									<directory>${property.source.dir}</directory>
									<filtering>true</filtering>
								</resource>
							</resources>
							<outputDirectory>${property.target.dir}/development</outputDirectory>
						</configuration>						
					</execution>
					<execution>
						<id>production-property-file</id>
						<phase>package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<filters>
								<!-- simply filter the production property file with no overrides -->
								<filter>${property.filters.dir}/production.filters</filter> 
							</filters>
							<resources>
								<resource>
									<directory>${property.source.dir}</directory>
									<filtering>true</filtering>
								</resource>
							</resources>
							<outputDirectory>${property.target.dir}/production</outputDirectory>
						</configuration>						
					</execution>					
				</executions>							
			</plugin>

		</plugins>
	</build>
</project>
